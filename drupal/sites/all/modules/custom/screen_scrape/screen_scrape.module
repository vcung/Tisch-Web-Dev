<?php
/*
*Implements Hook_feeds_parser_sources_alter()
*Use this hook to add additional mapping sources for any parser. 
*Allows for registering a callback to be invoked at mapping time.
*/
function screen_scrape_feeds_parser_sources_alter(&$sources, $content_type) {
  $sources['Author'] = array(
    'name' => t('Author'), 
    'description' => t('author of feed item'), 
    'callback' => 'screen_scrape_get_author',
  );
    $sources['Location'] = array(
    'name' => t('Location'), 
    'description' => t('location of feed item'), 
    'callback' => 'screen_scrape_get_location',
  );
    $sources['Call_Number'] = array(
    'name' => t('Call Number'), 
    'description' => t('Call number of feed item.'), 
    'callback' => 'screen_scrape_get_call_number',
  );
  
    $sources['link'] = array(
    'name' => t('Link'), 
    'description' => t('Link'), 
    'callback' => 'screen_scrape_get_link',
  );
  
  $sources['Time_Created'] = array(
    'name' => t('Time Created'), 
    'description' => t('Time the node is created from feed item.'), 
    'callback' => 'screen_scrape_get_creationTime',
  );
  
 /*     $sources['isbn'] = array(
    'name' => t('ISBN'), 
    'description' => t('Images occuring in the description element of a feed item.'), 
    'callback' => 'screen_scrape_get_isbn',
  );*/
}


/**
*Callback functions for custom mapping sources, customized to work with the format of new acquisitions feed
*$source: The FeedsSource object being imported.
*$result: The FeedsParserResult object being mapped from.
*$key: The key specified in the $sources array in hook_feeds_parser_sources_alter().
**/
function screen_scrape_get_link(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/href=\"(.*)\"/', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_author(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/Author\s\:\s<\/span>(.*)\./', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_location(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  
  preg_match('/Location\s\:\s<\/span>(.*?)</', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_call_number(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/Call\sNumber\s\:\s<\/span>(.*)<\/td>/', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_creationTime(FeedsSource $source, FeedsParserResult $result, $key) {
  $date= date("U");
  return $date;
}


/************************************************/

//returns the matches to $entryMatch from the web page
function return_html_content(&$node, $url, $section, $toSplit, $count, $entryMatch, $name) {
	$html = drupal_http_request($url)->data;

	//Get only the section of the page that you want
	preg_match($section, $html, $matches);

	//Separate the page via the explode function into an array
	$itemsArray = explode($toSplit, $matches[1]);
	$itemsCount = count($itemsArray);			
	
	$node->content[$name] = array();
	
	for ($i=0; $i< $count; $i++) {
		preg_match($entryMatch, $itemsArray[$i], $entry);
		$node->content[$name][$i]= array (
			'#type' => 'markup',
			'#prefix' => '<p>'.$entry[1],
			'#suffix' => '</p>'
		);
	}
}

//returns information on location, call number, and status of the items from the source
function get_availability($url, $section, $toSplit, $offset, $count, $location, $callNo, $status, $name) {
	$html = drupal_http_request($url)->data;
	//Get only the section of the page that you want
	preg_match($section, $html, $matches);

	//Separate the page via the explode function into an array
	$itemsArray = explode($toSplit, $matches[1]);

	if (empty($count)) {
		$itemsCount = count($itemsArray);
	} else {
		$itemsCount = $count;
	}
	
	$available = 0;
	
	for ($i=$offset; $i< $itemsCount; $i++) {
		preg_match($location, $itemsArray[$i], $loc);
		preg_match($callNo, $itemsArray[$i], $no);
		preg_match($status, $itemsArray[$i], $stat);
		
		if (trim($stat[1]) == 'AVAILABLE') {
			$available+=1;
		}
	}
	
	return $available;
}


function get_num_available($html, $offset, $count){
	$available=0;
	
	// loads the page
	phpQuery::newDocumentFileHTML($html);

	// Once the page is loaded, you can then make queries on whatever DOM is loaded.  
	// This example grabs the title of the currently loaded page.

	$technology = pq('.bibItemsEntry td');

	if (empty($count)) {
		$technologyCount = count($technology);
	} else {
		$technologyCount = $count;
	}

	if ($technologyCount == 0) {}
	else {
		for ($i=$offset; $i<=$technologyCount - 1; $i++) {
			$url = pq('.bibItemsEntry td:eq(' . $i . ') a')->attr('href');
			$itemsLoc = pq('.bibItemsEntry td:eq(' . $i . ')')->text();
			$itemsNo = pq('.bibItemsEntry td:eq(' . ($i+=1) . ')')->text();
			$itemsStat = pq('.bibItemsEntry td:eq(' . ($i+=1) . ')')->text();

			//to remove prefixing "nbsp;" 
			preg_match("/nbsp\;(.*) /s",htmlspecialchars(htmlentities($itemsStat)), $status);

			if (trim($itemsStat) == 'AVAILABLE' || trim($status[1]) == 'AVAILABLE') {
				$available += 1;
			}
		}
	}
	return $available;
}

function screen_scrape_node_view($node, $view_mode, $langcode) {

	//switch ($node->nid) {
	switch ($node->title) {
	
	  case 'New Acquisitions' : //Node for New Acquisition
		$url = 'http://www.library.tufts.edu/SearchResults.asp?library=Tisch+Library&OrderBy=item.author&Search=Search';
		$section = '/<div id=\"results\">(.*?)<div id=\"resultsBottom\">/s';
		$toSplit = "</div>";
		$count = 10;
		$entryMatch='/<p>(.*?)<\/p>/s';
		$name='newAcqu';
		return_html_content($node, $url, $section, $toSplit, $count, $entryMatch, $name);
		
		break;
	  
	  case 'Bikes':
		$url = 'http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,';
		$section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';
		$toSplit = '<tr  class="bibItemsEntry">';
		$count = 30;
		//$entryMatch = '/<!-- field % -->&nbsp\;(.*)<\/td>/s'; //only needed if using return_html_content()
		$name='bike';

		$location = '/<!-- field 1 -->&nbsp\;(.*?)<\/td>/s';
		$callNo = '/<!-- field C -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';
		
		//return_html_content($node, $url, $section, $toSplit, $count, $entryMatch, $name);
		$bike=get_availability($url, $section, $toSplit, 0, $count, $location, $callNo, $status, $name);
		$node->content['tech']=array(
			'#prefix' => '<p>'.$bike.' Bikes</p>'
			);
		break;
	  
	  case 'Laptops':
		$url = 'http://library.tufts.edu/record=b1684189~S1';
		$section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';
		$toSplit = '<tr  class="bibItemsEntry">';
	
		$location = '/<!-- field 1 -->&nbsp\;(.*?)<\/td>/s';
		$callNo = '/<!-- field v -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';
		
		$name='laptop';
		$count = ''; 
	
		$laptop=get_availability( $url, $section, $toSplit, 5, $count, $location, $callNo, $status, $name);
		$node->content['tech']=array(
			'#prefix' => '<p>'.$laptop.' Laptops</p>'
			);
		break;
	  
	  case 'Available Technology':
	  
		  include_once('phpQuery-onefile.php');
		  
		  $html = ('http://library.tufts.edu/record=b2307230~S2 #bibItems'); // see below for source
		  $count = "";
		  $offset = 0;
		  
		  $ipad = get_num_available($html, $offset, $count);
		  $harddrive = get_num_available('http://library.tufts.edu/record=b2321148~S1', $offset, $count);
		  $laptop = get_num_available('http://library.tufts.edu/record=b1684189~S1', 15, $count); //first 5 is not from tisch
		  $bike = get_num_available('http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,', $offset, 90);
		  $camcorder = get_num_available('http://library.tufts.edu/record=b2032147~S1', $offset, $count);
			
			$node->content['tech']=array(
				'#markup' => '<p>'.$bike.' Bikes</p>
							<p>'.$camcorder.' Video Cameras</p>
							<p>'.$harddrive.' External Hard Drive</p>
							<p>'.$ipad.' Ipads</p>
							<p>'.$laptop.' Laptops</p>	
								'
				);
	  
	/***	//Bike
		$bike_url = 'http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,';
		$section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';
		$toSplit = '<tr  class="bibItemsEntry">';
		$bike_count = 30;
		$bike_name='bike';
		$location = '/<!-- field 1 -->&nbsp\;(.*?)<\/td>/s';
		$bike_callNo = '/<!-- field C -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';
		$bike = get_availability($bike_url, $section, $toSplit, 0, $bike_count, $location, $bike_callNo, $status, $name);
		
		//Laptop
		$laptop_url = 'http://library.tufts.edu/record=b1684189~S1';
		$laptop_callNo = '/<!-- field v -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$laptop_name='laptop';
		$laptop= get_availability($laptop_url, $section, $toSplit, 5, '', $location, $laptop_callNo, $status, $laptop_name);
		
		//Ipad
		$ipad_url = 'http://library.tufts.edu/record=b2307230~S2';
		$ipad_callNo = '/<!-- field C -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$ipad_name='laptop';
		$ipad= get_availability($ipad_url, $section, $toSplit, 0, '', $location, $ipad_callNo, $status, $ipad_name);
		
		//Video Camera (Camcorder)
		$camcorder_url = 'http://library.tufts.edu/record=b2032147~S1';
		$camcorder_callNo = '/<!-- field v -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$camcorder_name='laptop';
		$camcorder= get_availability($camcorder_url, $section, $toSplit, 0, '', $location, $camcorder_callNo, $status, $camcorder_name);
		
		//External Hard Drive
		$harddrive_url = 'http://library.tufts.edu/record=b2321148~S1';
		$harddrive_callNo = '/<!-- field v -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
		$harddrive_name='harddrive';
		$harddrive= get_availability($harddrive_url, $section, $toSplit, 0, '', $location, $harddrive_callNo, $status, $harddrive_name);
		
		$node->content['tech']=array(
			'#markup' => '<p>'.$bike.' Bikes</p>
						<p>'.$camcorder.' Video Cameras</p>
						<p>'.$harddrive.' External Hard Drive</p>
						<p>'.$ipad.' Ipads</p>
						<p>'.$laptop.' Laptops</p>	
							'
			);
			**/
	  break;
	  default:
	}
	
}

function screen_scrape_block_view_alter(&$data, $block) {
	
	switch ($block->title) { //or use delta
		case ('Available Technology'): 
		
	include_once('phpQuery-onefile.php');

	$html = ('http://library.tufts.edu/record=b2307230~S2 #bibItems'); // see below for source
	$count = "";
	$offset = 0;

	$ipad = get_num_available($html, $offset, $count);
	$harddrive = get_num_available('http://library.tufts.edu/record=b2321148~S1', $offset, $count);
	$laptop = get_num_available('http://library.tufts.edu/record=b1684189~S1', 15, $count); //first 5 is not from tisch
	$bike = get_num_available('http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,', $offset, 90);
	$camcorder = get_num_available('http://library.tufts.edu/record=b2032147~S1', $offset, $count);

	$data['content']=array(
		'#markup' => '<p>'.$bike.' Bikes</p>
					<p>'.$camcorder.' Video Cameras</p>
					<p>'.$harddrive.' External Hard Drive</p>
					<p>'.$ipad.' Ipads</p>
					<p>'.$laptop.' Laptops</p>	
						'
		);
	
	/*drupal_add_js('sites/all/modules/custom/screen_scrape/screen_scrape.js');		
	 $block->content['js'] = drupal_get_path('module', 'screen_scrape') . '/screen_scrape.js';
		break;
	*/
	
	default:
	}


}





















