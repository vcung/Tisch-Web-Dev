<?php

/**
 * @file
 * Screen Scrape custom module
 *
 * @todo Apply Drupal commenting standards
 *   see https://drupal.org/coding-standards/docs
 */

 
/**
 * Tisch Library data source URLs
 */
define('TISCH_NEW_ACQUISITIONS_URL', 'http://www.library.tufts.edu/SearchResults.asp?library=Tisch+Library&OrderBy=item.author&Search=Search');
define('TISCH_BIKES_URL', 'http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,');
define('TISCH_IPAD_URL', 'http://library.tufts.edu/record=b2307230~S2');
define('TISCH_HARDDRIVES_URL', 'http://library.tufts.edu/record=b2321148~S1');
define('TISCH_LAPTOPS_URL', 'http://library.tufts.edu/record=b1684189~S1');
define('TISCH_CAMCORDERS_URL', 'http://library.tufts.edu/record=b2032147~S1');

// etc.
// Use consolidated list of constants at top of page for maintenance,
// or possibly expose in admin form

/**
 * Data source URL list
 *
 * @return
 *   An array keyed by the data source name
 */
function _screen_scrape_list() {
  $feeds = array(
    'ipads' => array(
      'label' => t('iPads'),
      'url' => TISCH_IPAD_URL,
      'offset' => 0,
      'count' => '',
      ),
    'harddrives' => array(
      'label' => t('External Hard Drives'),
      'url' => TISCH_HARDDRIVES_URL,
      'offset' => 0,
      'count' => '',
      ),
    'laptops' => array(
      'label' => t('Laptops'),
      'url' => TISCH_LAPTOPS_URL,
      'offset' => 5,
      'count' => '',
      ),
    'bikes' => array(
      'label' => t('Bikes'),
      'url' => TISCH_BIKES_URL,
      'offset' => 0,
      'count' => 30,
      ),
    'camcorders' => array(
      'label' => t('Video Cameras'),
      'url' => TISCH_CAMCORDERS_URL,
      'offset' => 0,
      'count' => '',
      ),
    );
  return $feeds;
}

/**
 * Implements hook_cron_queue_info().
 *
 * Creates the screen-scrape cron queue
 * See http://getlevelten.com/blog/randall-knutson/cron-queues-processing-large-amounts-data-cron
 */
function screen_scrape_cron_queue_info() {
  $queues['screen_scrape_feed'] = array(
    'worker callback' => 'screen_scrape_refresh', // Callback function
    'time' => 60, // Max run time per cron run in seconds.
  );
  return $queues;
}

/**
 * Implements hook_cron()
 */
function screen_scrape_cron() {
  $feeds = _screen_scrape_list();
  $queue = DrupalQueue::get('screen_scrape_feed');
  // This needs to be modified to pass the feed key in somehow
  foreach ($feeds as $feed) { 
    $queue->createItem($feed);
    
  }
}

/**
 * Checks a feed for updates.
 *
 * @param $feed
 *   An array describing the data URL
 *
 */
 function screen_scrape_refresh($feed) {
  
  // Convert $feed array to $url, $offset and $count variables
  extract($feed);
  
  $feed_key = $feed['label'];
  // Now we actually get the remote data and process it
  $value = _screen_scrape_get_num_available($url, $offset, $count);
  // Store the value in the variable table
  variable_set('screen_scrape_' . $feed_key, $value); // This is where the feed key will go
}

/**
 * Implements hook_block_info()
 */ 
function screen_scrape_block_info() {
   $blocks['available_technology'] = array(
    'info' => t('Available Technology'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_view()
 */ 
function screen_scrape_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'available_technology':
      $block['subject'] = t('Available Technology');
      $block['content'] = _screen_scrape_block_html();
    break;
  }
  return $block;
}

/**
 * Generate Available Technology HTML from stored variables
 */ 
function _screen_scrape_block_html() {
  $feeds = _screen_scrape_list();
  $variables = array();
  $output = '';
  foreach ($feeds as $key => $feed) {
   $variables['items'][] = array(
      'data' => theme('screen_scrape_item', array('count' => variable_get('screen_scrape_' . $feed['label']), 'label' => $feed['label'])),
    );   
  }
  $output = theme('item_list', $variables); 
  
  return $output;
}


/**
 * Implements hook_theme()
 */ 
function screen_scrape_theme($existing, $type, $theme, $path) {
  return array(
    'screen_scrape_item' => array(
      'variables' => array('count' => 0, 'label' => NULL),
    ),
  );
}

/**
 * Returns HTML for a screen-scrape list item
 * 
 * @param $variables
 *   An associative array containing:
 *   - count: The number of items available
 *   - label: The label for the item
 */
function theme_screen_scrape_item($variables) {
  extract($variables);
  $output = "<span class='screen-scrape__item-count'>$count</span> <span class='screen-scrape__item-label'>$label</span>";
  return $output;
}

/**
 * Count number of technology available
 *
 * @return
 *   A number with leading zero
 */
function _screen_scrape_get_num_available($url, $offset, $count) {
  
  $section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';  
  $status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';  
  $to_split = '<tr  class="bibItemsEntry">';  
  $available = 0;
  $html = drupal_http_request($url)->data; 
  
  //Get only the section of the page that you want
  preg_match($section, $html, $matches);
  //Separate the page via the explode function into an array
  $items_array = explode($to_split, $matches[1]);

  if (empty($count)) {
    $items_count = count($items_array);
  } 
  else {
    $items_count = $count;
  }
  
  for ($i=$offset; $i< $items_count; $i++) {
    preg_match($status, $items_array[$i], $stat);
    if (trim($stat[1]) == 'AVAILABLE') {
      $available+=1;
    }
  }
  
  return sprintf("%02s", $available);
  
  //below code works locally bu not on dev site - cUrl problem
   /* $available=0;
  // loads the page
  phpQuery::newDocumentFileHTML($url);

  // Once the page is loaded, you can then make queries on whatever DOM is loaded.  
  // This example grabs the title of the currently loaded page.

  $technology = pq('.bibItemsEntry td');

  if (empty($count)) {
    $technologyCount = count($technology);
  } else {
    $technologyCount = $count;
  }

  if ($technologyCount == 0) {}
  else {
    for ($i=$offset; $i<=$technologyCount - 1; $i++) {
    //  $url = pq('.bibItemsEntry td:eq(' . $i . ') a')->attr('href');
     // $itemsLoc = pq('.bibItemsEntry td:eq(' . $i . ')')->text();
     // $itemsNo = pq('.bibItemsEntry td:eq(' . ($i+=1) . ')')->text();
      $itemsStat = pq('.bibItemsEntry td:eq(' . ($i+=1) . ')')->text();

      //to remove prefixing "nbsp;" 
      preg_match("/nbsp\;(.*) /s",htmlspecialchars(htmlentities($itemsStat)), $status);

      if (trim($itemsStat) == 'AVAILABLE' || trim($status[1]) == 'AVAILABLE') {
        $available += 1;
      }
    }
  }
  return sprintf("%02s", $available);
  */
  
}





















