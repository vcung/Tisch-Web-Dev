<?php
/*
*Implements Hook_feeds_parser_sources_alter()
*Use this hook to add additional mapping sources for any parser. 
*Allows for registering a callback to be invoked at mapping time.
*/
function screen_scrape_feeds_parser_sources_alter(&$sources, $content_type) {
  $sources['Author'] = array(
    'name' => t('Author'), 
    'description' => t('author of feed item'), 
    'callback' => 'screen_scrape_get_author',
  );
    $sources['Location'] = array(
    'name' => t('Location'), 
    'description' => t('location of feed item'), 
    'callback' => 'screen_scrape_get_location',
  );
    $sources['Call_Number'] = array(
    'name' => t('Call Number'), 
    'description' => t('Call number of feed item.'), 
    'callback' => 'screen_scrape_get_call_number',
  );
  
    $sources['link'] = array(
    'name' => t('Link'), 
    'description' => t('Link'), 
    'callback' => 'screen_scrape_get_link',
  );
  
  $sources['Time_Created'] = array(
    'name' => t('Time Created'), 
    'description' => t('Time the node is created from feed item.'), 
    'callback' => 'screen_scrape_get_creationTime',
  );
  
 /*     $sources['isbn'] = array(
    'name' => t('ISBN'), 
    'description' => t('Images occuring in the description element of a feed item.'), 
    'callback' => 'screen_scrape_get_isbn',
  );*/
}


/**
*Callback functions for custom mapping sources
*$source: The FeedsSource object being imported.
*$result: The FeedsParserResult object being mapped from.
*$key: The key specified in the $sources array in hook_feeds_parser_sources_alter().
**/
function screen_scrape_get_link(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/href=\"(.*)\"/', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_author(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/Author\s\:\s<\/span>(.*)\./', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_location(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  
  preg_match('/Location\s\:\s<\/span>(.*?)</', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_call_number(FeedsSource $source, FeedsParserResult $result, $key) {
  $item = $result->currentItem();
  $description = $item['description'];
  preg_match('/Call\sNumber\s\:\s<\/span>(.*)<\/td>/', $description, $matches);
  return $matches[1];
}

function screen_scrape_get_creationTime(FeedsSource $source, FeedsParserResult $result, $key) {
  $date= date("U");
  return $date;
}


/************************************************/

//returns the matches to $entryMatch from the html page
function return_html_content(&$node, $url, $section, $toSplit, $count, $entryMatch, $name) {
	$html = file_get_contents($url);
	//Get only the section of the page that you want
	preg_match($section, $html, $matches);

	//Separate the page via the explode function into an array
	$itemsArray = explode($toSplit, $matches[1]);
	$itemsCount = count($itemsArray);			
	
	for ($i=0; $i< $count; $i++) {
		preg_match($entryMatch, $itemsArray[$i], $entry);
		$node->content[$name . $i]= array (
			'#type' => 'markup',
			'#prefix' => '<p>'.$entry[1],
			'#suffix' => '</p>'
		);
	}
}

//returns information on location, call number, and status of the items on the page
function get_availability(&$node, $url, $section, $toSplit, $count, $location, $callNo, $status, $name) {
	$html = file_get_contents($url);
	//Get only the section of the page that you want
	preg_match($section, $html, $matches);

	//Separate the page via the explode function into an array
	$itemsArray = explode($toSplit, $matches[1]);
		//May not be accurate depending on explode(), $count not used	
	//echo $itemsCount;
	if (empty($count)) {
		$itemsCount = count($itemsArray);
	} else {
		$itemsCount = $count;
	}
	
	for ($i=0; $i< $itemsCount; $i++) {
		preg_match($location, $itemsArray[$i], $loc);
		preg_match($callNo, $itemsArray[$i], $no);
		preg_match($status, $itemsArray[$i], $stat);

		$node->content[$name . $i]= array (
			'#type' => 'markup',
			'#prefix' => '<p>'. $loc[1] . '<br>' . $no[1] . '<br>' . $stat[1],
			'#suffix' => '</p>'
		);
	}
}


function screen_scrape_node_view($node, $view_mode, $langcode) {

		switch ($node->title) {
		  case 'New Acquisitions' : //Node for New Acquisition
			$url = 'http://www.library.tufts.edu/SearchResults.asp?library=Tisch+Library&OrderBy=item.author&Search=Search';
			$section = '/<div id=\"results\">(.*?)<div id=\"resultsBottom\">/s';
			$toSplit = "</div>";
			$count = 10;
			$entryMatch='/<p>(.*?)<\/p>/s';
			$name='newAcqu';
			return_html_content($node, $url, $section, $toSplit, $count, $entryMatch, $name);
			
			/********
			$url = 'http://www.library.tufts.edu/SearchResults.asp?library=Tisch+Library&OrderBy=item.author&Search=Search';
			$html = file_get_contents($url);
			//Get only the section of the page that you want
			preg_match('/<div id=\"results\">(.*?)<div id=\"resultsBottom\">/s', $html, $matches);

			//Separate the page via the explode function into an array
			$itemsArray = explode("</div>", $matches[1]);
			$itemsCount = count($itemsArray);
			
			//echo $itemsCount;
			//echo htmlspecialchars($matches[1]);
			
			for ($i=0; $i< 10; $i++) {
				preg_match('/<p>(.*?)<\/p>/s', $itemsArray[$i], $entry);
				$node->content["newAcqu" . $i]= array (
					'#type' => 'markup',
					'#prefix' => '<p>'.$entry[1],
					'#suffix' => '</p>'
				);
			}
			*************/
			break;
		  
		  case 'Bikes':
		  
			$url = 'http://library.tufts.edu/search~S1?/.b2133185/.b2133185/1,1,1,B/holdings~2133185&FF=&1,0,';
			$section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';
			$toSplit = '<tr  class="bibItemsEntry">';
			$count = 30;
			//$entryMatch = '/<!-- field % -->&nbsp\;(.*)<\/td>/s'; //only needed if using return_html_content()
			$name='bike';

			$location = '/<!-- field 1 -->&nbsp\;(.*?)<\/td>/s';
			$callNo = '/<!-- field C -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
			$status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';
			
			//return_html_content($node, $url, $section, $toSplit, $count, $entryMatch, $name);
			get_availability($node, $url, $section, $toSplit, $count, $location, $callNo, $status, $name);
			
			break;
		  
		  case 'Laptops':
			$url = 'http://library.tufts.edu/search~S1?/tlaptop/tlaptop/1%2C12%2C13%2CB/frameset&FF=tlaptop+and+peripherals&1%2C1%2C';
			$section = '/<tr  class=\"bibItemsEntry\">(.*)<\/tr>/s';
			$toSplit = '<tr  class="bibItemsEntry">';
		
			$location = '/<!-- field 1 -->&nbsp\;(.*?)<\/td>/s';
			$callNo = '/<!-- field v -->&nbsp\;(.*?)<!-- field # -->&nbsp\;<\/td>/s';
			$status = '/<!-- field % -->&nbsp\;(.*?)<\/td>/s';
			
			$name='laptop';
			$count = ''; 
		
					
			get_availability($node, $url, $section, $toSplit, $count, $location, $callNo, $status, $name);
			break;
		  
		  
		  
		  default:
	}
	
}

/****** Referred to bikes.php from mobile site, using php's file_get_contents(), rather than below code for screen scraping
		because of issues with use of pq() not being a defined function
		
$html = ('http://www.library.tufts.edu/SearchResults.asp?library=Tisch+Library&OrderBy=item.author&Search=Search'); // see below for source
  
// loads the page above
phpQuery::newDocumentFileHTML($html);

// Once the page is loaded, you can then make queries on whatever DOM is loaded.  
// This example grabs the title of the currently loaded page.
	
	//$available = pq('#results')->text();
	$newAquisitions = pq('#results div');
	$AquisitionsCount = count($newAquisitions);
	
	print '<ul>';
	
	for ($i=0; $i<=$AquisitionsCount - 1; $i++) {
		
		$item = pq('#results div p');
		$items = pq('#results div p .itemHeading');
		$itemsCount = count($items);
		for ($i=0; $i<=$itemsCount - 1; $i++) {
				$heading = pq('.itemHeading:eq(' . $i . ')')->text();
				//$text = pq('.itemHeading:eq(' . $i . ')')->text();
		}
		//$url = pq('#results div:eq(' . $i . ') a')->attr('href');

		print ('<li>');
		print ('<div style="font-weight: normal; padding-top: 3px; padding-bottom: 5px; font-size: 100%;"><p> $item </p><br>' . $heading . '</div>');
		print ('</li>');
		
	}
		
	print ('</ul>');


*****/





















