<?php

/**
* Implements Entityform's hook_form_alter().
*/ 
function entityform_add_fieldset_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
	  case 'also_course_reserves_entityform_edit_form' :

	    if (isset($form_state['num_fields'])) {
		    $form_state['num_fields'] = $form_state['num_fields'] + 1; 
		}
		else {
		    $form_state['num_fields'] = 1;
		}
	     //add more items button
		$form['field_wrapper'] = array(
		    '#title' => t('Place a Book, Score, CD or other Recording on Reserve'),
			'#tree' => TRUE,
			'#collapsible' => TRUE,
            '#collapsed' => FALSE,
			'#type' => 'fieldset',
			'#access' => TRUE,
			'#attributes' => array('id' => array('add-another')),
		    '#prefix' => '<div id = "additional_fields-div">',
			'#suffix' => '</div>',
		);

		

		$num_checkboxes =  !empty($form_state['num_fields']) ? $form_state['num_fields'] : 1;  
		for ($i = 1; $i <= $num_checkboxes; $i++) {
		$form['field_wrapper'][$i] = $form['field_name'];
		/*	$form['field_wrapper']['und'][$i] = array(
				'#tree' => TRUE,
			);*/
			/**********/
			$form['field_wrapper'][$i]['und']['#title'] =  t('name'.$i);
			$form['field_wrapper'][$i]['und'][0]['value']['#title'] =  t('name'.$i);
			$form['field_wrapper'][$i]['und'][0]['value']['#default_value'] = $i;
			$form['field_wrapper'][$i]['und']['#field_name'] =  'field_name'.$i;
			$form['field_wrapper'][$i]['und'][0]['value']['#field_name'] =  'field_name'.$i;
		
		
		/* 	+= array(
			   '#theme' => 'field_multiple_value_form',
               '#field_name' => 'field_name'.$i,
			   '#cardinality' => $i,
			   '#title' => t('name'.$i),
			   '#after_build' => array ( 'field_form_element_after_build' ),
			   '#language' => 'und',
			   '#field_parents' =>array (),
			   '#default_value' => $i,
			  'value' => array (
					'#entity_type' => 'entityform',
					'#entity' => 'Entityform',
					'#bundle' => 'also_course_reserves',
					
			   ),
			);*/

			/*************************************/
		/*	
 			$form['field_wrapper'][$i]['item_format'] = array (
				'#title' => t('Format'),
				'#type' => 'radios',
				'#options' => array(
					'Book' => 'book', 
					'Score' => 'score', 
					'CD (or other recording)' => 'CD (or other recording)' , 
					'Video' => 'Video',
				),
			);
			$form['field_wrapper'][$i]['call_num'] = array (
				'#type' => 'textfield',
				'#title' => t('Call number'),
			);
			$form['field_wrapper'][$i]['Title'] = array (
				'#type' => 'textfield',
				'#title' => t('Title of Book or Work: '),
				//'#required' => TRUE,

			);
			$form['field_wrapper'][$i]['author'] = array (
				'#type' => 'textfield',
				'#title' => t('Author, Editor or Composer'),
			);
			$form['field_wrapper'][$i]['preferred_performer'] = array (
				'#type' => 'textfield',
				'#title' => t('Preferred Performer (if applicable)'),
			);
			$form['field_wrapper'][$i]['Publisher'] = array (
				'#type' => 'textfield',
				'#title' => t('Publisher'),
			);
			$form['field_wrapper'][$i]['year'] = array (
				'#type' => 'textfield',
				'#title' => t('Year if a specific year is required.'),
				'#maxlength' => 4,
				'#size' => 4,
			//	'#element_validate' => array('entityform_add_fieldset_validate_num'),
			);
			$form['field_wrapper'][$i]['Edition'] = array (
				'#type' => 'textfield',
				'#title' => t('Edition if a specific edition is required.'),
				'#maxlength' => 20,
				'#size' => 20,
			);
			$form['field_wrapper'][$i]['circulation_type'] = array (
				'#title' => t('Type of Circulation: '),
				'#type' => 'radios',
				'#options' => array(
					'Room Use (4 Hours)' => 'Room Use (4 Hours)', 
					'8 hours/Overnight' => '8 hours/Overnight', 
					'3 Days' => '3 Days' , 
					'7 Days' => '7 Days'
				),
			//	'#required' => TRUE,
			);
			$form['field_wrapper'][$i]['supplied'] = array (
				'#title' => t('Supplied by Instructor?'),
				'#type' => 'radios',
				'#options' => array('Yes' => 'Yes', 'No' => 'No', ),
			);	*/
		}
	
		$form['add_button'] = array (
			'#type' => 'button',
			'#value' => 'click',
		//	'#weight' => 999,
		//	'#submit' => 'entityform_add_fieldset_add_more',
			'#ajax' => array ( 
				'callback' => 'entityform_add_fieldset_add_more_callback',
				'wrapper' => 'additional_fields-div',
				//'method' => 'replace',
				'effect' => 'fade',
				),
		);
		//overwriting entityform's default submit
		//unset ($form['actions']['submit']['#submit']);
		//$form['#submit'] =  array( 'entityform_add_fieldset_submit_alter');
krumo($form_state);
krumo($form);
       return $form;
		
		
    	$form['#submit'] = array ('entityform_add_fieldset_submit');
		break;
		default:
	}
}
function entityform_add_fieldset_submit($form, $form_state){
$i = $form_state['num_fields'];
$form_state['field']['field_'.$i]=$form_state['field']['field_name'];//_wrapper'][$i]['und'];
$form['#values'] += $form['field_wrapper'][2];
$form['value'] += $form['field_wrapper'][2];
$form_state['value'] += $form['field_wrapper'][2];
$form_state['value'] += $form['field_wrapper'][2];
}

function entityform_add_fieldset_add_more_callback($form, $form_state) {
$i = $form_state['num_fields'];
$form_state['field']['field_'.$i]=$form_state['field']['field_name'];//_wrapper'][$i]['und'];
 $form_state['rebuild'] = TRUE;
	return $form['field_wrapper'];
}

function entityform_add_fieldset_submit_alter($form, $form_state) {
$node = node_form_submit_build_node($form, $form_state);

 /*$insert = empty($node->nid);
  node_save($node);
   $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array(
    '@type' => $node->type,
    '%title' => $node->title,
  );
  $t_args = array(
    '@type' => node_type_get_name($node),
    '%title' => $node->title,
  );
*/   //$form_state['values']['nid'] = $node->nid;
   // $form_state['nid'] = $node->nid;
  //  $form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : 
 //$form_state['values']['field_wrapper']= $form['field_wrapper'];
 
 //cache_clear_all();
 
 $info = entity_get_info($entity_type);
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);

  // Copy top-level form values that are not for fields to entity properties,
  // without changing existing entity properties that are not being edited by
  // this form. Copying field values must be done using field_attach_submit().
  $values_excluding_fields = $info['fieldable'] ? array_diff_key($form_state['values'], field_info_instances($entity_type, $bundle)) : $form_state['values'];
  foreach ($values_excluding_fields as $key => $value) {
    $entity->$key = $value;
  }

  // Invoke all specified builders for copying form values to entity properties.
  if (isset($form['#entity_builders'])) {
    foreach ($form['#entity_builders'] as $function) {
      $function($entity_type, $entity, $form, $form_state);
    }
  }

  // Copy field values to the entity.
  if ($info['fieldable']) {
    field_attach_submit($entity_type, $entity, $form, $form_state);
  }
}

/******
Creates custom Field_group called "New Fieldset". Uses jQuery to create "add more" functionality
*******/

/**
* Implements Field Group's hook_field_group_formatter_info().
*/
function entityform_add_fieldset_field_group_formatter_info() {
  return array(
    'form' => array(
     'Newfieldset' => array(
        'label' => t('New Fieldset'),
     //   'description' => t('This fieldgroup renders the inner content in a fieldset with the titel as legend.'),
      //  'format_types' => array('open', 'collapsible', 'collapsed'),
        'instance_settings' => array('description' => '', 'classes' => '', 'page_header' => 3, 'page_counter' => 1, 'more_button' => 1),
        'default_formatter' => 'collapsible',
      ),
    ),
  );
  
} 

/**
* Implements Field Group's hook_field_group_pre_render_alter().
*/
function entityform_add_fieldset_field_group_pre_render_alter(&$element, $group, &$form) {

  if ($group->format_type == "Newfieldset") {
    $element += array(
		'#type' => 'fieldset',
		'#title' => check_plain(t($group->label)),
		'#collapsible' => $group->collapsible,
		'#collapsed' => $group->collapsed,
		//'#pre_render' => array(),
		'#prefix' => '<div id="NewFieldsetTest" class="field-group-' . $group->format_type . '-wrapper ' . $group->classes . '">',
		'#suffix' => '<input type="button" class="entityform-add-book" value="Add Another" /></div>' ,

		'#attributes' => array('class' => explode(' ', $group->classes)),
		'#description' => $group->description,
  );

   $element['#attached']['js'][] = drupal_get_path('module', 'entityform_add_fieldset') . '/entityform_add_fieldset.js';
 
  }
}

