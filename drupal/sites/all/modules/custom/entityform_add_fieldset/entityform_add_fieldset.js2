(function ($) {
/*
 Drupal.theme.AddMore = function() { 
  
  var controls;// = {};
  controls += '<span class="addmore-button"></span>';//item = $('<span class="addmore-button"></span>');
  //is form-submit needed
  controls += '<input type="button" id="add-book" class="form-submit entityform-add-book" value="Add Another" />';//item.append(controls.addMore = $('<input type="button" class="form-submit entityform-add-book" value="" />').val(controls.nextTitle = Drupal.t('Add Another')));
  $(controls).appendTo('.field-group-AddMore');//.append(controls);
  console.log("what");
};
$.extend(this, Drupal.theme('AddMore'));
*/

  /*
  $('body').on('click', '#add-book', function() {
	     var formId = 'NewForm' + uniqueId;
		 toClone = $(self).children().first();
        // var copy = $(".book:first").clone();
         copy = toClone.clone(true, true) ; 	
         copy.attr('id', formId );
		 copy.attr('class', 'book');
	  
	     $(copy).find('label,select').each(function(){
		    $(this).attr('for', $(this).attr('for') + uniqueId); 
		 });
	     $(copy).find('input,select').each(function(){
		    if ($(this).attr('id')==="InputFormat-other") { $(this).hide(); }//input for other option is initially hidden
            $(this).attr('id', $(this).attr('id') + uniqueId);
			$(this).attr('name', $(this).attr('name') + uniqueId);
			//added format-other class in html to Format radio buttons to distinguish "otherDescript" in each book
			if ($(this).hasClass('Format-other')) {
			    $(this).attr('class', $(this).attr('class') + uniqueId);
			}
         });
		 
		$(copy).find('input:text').val('');
		$(copy).find('input[type=checkbox]').attr('checked', false);
		$(copy).find('input[type=radio]').prop('checked', false);
		 
		 //make the remove area shown
        $(copy).find('#hide-book').removeClass('toShowAgain'); 
		 
        copy.appendTo(self.children());
  		

      children = $('#books').children();
         uniqueId++;
		 counter++; 
	
     });*/
	 
/**
 * This script transforms a set of wrappers into a stack of addmore pages. 
 * Another pane can be entered by clicking next/previous.
 *
 */
Drupal.behaviors.AddMore = {
 attach: function (context) {
    $('.addmore-panes', context).once('addmore', function () {

      var focusID = $(':hidden.addmore-active-control', this).val();
      var paneWithFocus;

      // Check if there are some wrappers that can be converted to addmores.
      var $panes = $('> div.field-group-addmore', this);
      var $form = $panes.parents('form');
      if ($panes.length == 0) {
        return;
      }

      // Create the next/previous controls.
      var $controls;

      // Transform each div.addmore-pane into a addmore with controls.
      $panes.each(function () {
        
        $controls = $('<div class="addmore-controls-list"></div>');
        $(this).append('<div class="addmore-controls clearfix"></div>').append($controls);
        
        // Check if the submit button needs to move to the latest pane.
        if (Drupal.settings.field_group.addmore_move_submit && $('.form-actions').length) {
          $('.form-actions', $form).remove().appendTo($($controls, $panes.last()));
        }
        
        var addmoreControl = new Drupal.addmoreControl({
          title: $('> .addmore-pane-title', this).text(),
          wrapper: $(this),
          has_next: $(this).next().length,
          has_previous: $(this).prev().length
        });
        
        $controls.append(addmoreControl.item);
        $(this)
          .addClass('addmore-pane')
          .data('addmoreControl', addmoreControl);

        if (this.id == focusID) {
          paneWithFocus = $(this);
        }
        
      });
      
      if (!paneWithFocus) {
        // If the current URL has a fragment and one of the tabs contains an
        // element that matches the URL fragment, activate that tab.
        if (window.location.hash && $(window.location.hash, this).length) {
          paneWithFocus = $(window.location.hash, this).closest('.addmore-pane');
        }
        else {
          paneWithFocus = $('addmore-open', this).length ? $('addmore-open', this) : $('> .addmore-pane:first', this);
        }
      }
      if (paneWithFocus.length) {
        paneWithFocus.data('addmoreControl').focus();
      }
    });
  }
};

/**
 * The addmorePane object represents a single div as a page.
 *
 * @param settings
 *   An object with the following keys:
 *   - title: The name of the tab.
 *   - wrapper: The jQuery object of the <div> that is the tab pane.
 */
Drupal.addmoreControl = function (settings) {
  var self = this;
  $.extend(this, settings, Drupal.theme('addmore', settings));

  this.nextLink.click(function () {
    self.nextPage();
    return false;
  });
  
  this.previousLink.click(function () {
    self.previousPage();
    return false;
  });
  

  // Keyboard events added:
  // Pressing the Enter key will open the tab pane.
  this.nextLink.keydown(function(event) {
    if (event.keyCode == 13) {
      self.focus();
      // Set focus on the first input field of the visible wrapper/tab pane.
      $("div.addmore-pane :input:visible:enabled:first").focus();
      return false;
    }
  });

  // Pressing the Enter key lets you leave the tab again.
  this.wrapper.keydown(function(event) {
    // Enter key should not trigger inside <textarea> to allow for multi-line entries.
    if (event.keyCode == 13 && event.target.nodeName != "TEXTAREA") {
      // Set focus on the selected tab button again.
      $(".addmore-tab-button.selected a").focus();
      return false;
    }
  });

};

Drupal.addmoreControl.prototype = {
    
  /**
   * Displays the tab's content pane.
   */
  focus: function () {
    this.wrapper
      .show()
      .siblings('div.addmore-pane')
        .each(function () {
          var tab = $(this).data('addmoreControl');
          tab.wrapper.hide();
        })
        .end()
      .siblings(':hidden.addmore-active-control')
        .val(this.wrapper.attr('id'));
    // Mark the active control for screen readers.
    $('#active-addmore-control').remove();
    this.nextLink.append('<span id="active-addmore-control" class="element-invisible">' + Drupal.t('(active page)') + '</span>');
  },
  
  /**
   * Continues to the next page or step in the form.
   *altered to duplicate fieldgroup
   */
  nextPage: function () {
    var copy = this.wrapper.clone();
	console.log("working");
  },
  
  /**
   * Returns to the previous page or step in the form.
   */
  previousPage: function () {
    this.wrapper.prev().data('addmoreControl').focus();
  },

  /**
   * Shows a horizontal tab pane.
   */
   
  tabShow: function () {
    // Display the tab.
    this.item.show();
    // Update .first marker for items. We need recurse from parent to retain the
    // actual DOM element order as jQuery implements sortOrder, but not as public
    // method.
    this.item.parent().children('.addmore-control').removeClass('first')
      .filter(':visible:first').addClass('first');
    // Display the wrapper.
    this.wrapper.removeClass('addmore-control-hidden').show();
    // Focus this tab.
    this.focus();
    return this;
  },

  /**
   * Hides a horizontal tab pane.
   */
  tabHide: function () {
    // Hide this tab.
    this.item.hide();
    // Update .first marker for items. We need recurse from parent to retain the
    // actual DOM element order as jQuery implements sortOrder, but not as public
    // method.
    this.item.parent().children('.addmore-control').removeClass('first')
      .filter(':visible:first').addClass('first');
    // Hide the wrapper.
    this.wrapper.addClass('horizontal-tab-hidden').hide();
    // Focus the first visible tab (if there is one).
    var $firstTab = this.wrapper.siblings('.addmore-pane:not(.addmore-control-hidden):first');
    if ($firstTab.length) {
      $firstTab.data('addmoreControl').focus();
    }
    return this;
  }
};


/**
 * Theme function for a addmore control.
 *
 * @param settings
 *   An object with the following keys:
 *   - title: The name of the tab.
 * @return
 *   This function has to return an object with at least these keys:
 *   - item: The root tab jQuery element
 *   - nextLink: The anchor tag that acts as the clickable area of the control
 *   - nextTitle: The jQuery element that contains the group title
 *   - previousLink: The anchor tag that acts as the clickable area of the control
 *   - previousTitle: The jQuery element that contains the group title
 */
 
 
Drupal.theme.prototype.addmore = function (settings) {
  var controls = {};
  controls.item = $('<span class="addmore-button"></span>');
  controls.item.append(controls.nextLink = $('<input type="button" class="form-submit addmore-link-next" value="" />').val(controls.nextTitle = Drupal.t('Add More')));
  controls.item.append(controls.previousLink = $('<a class="addmore-link-previous" href="#"></a>'));
  //if (!settings.has_next) {
 //   controls.nextLink.hide();
 // }
 // if (settings.has_previous) {
    controls.previousLink.append(controls.previousTitle = $('<strong></strong>').text(Drupal.t('Previous')));
 // }
  return controls;
};


Drupal.FieldGroup = Drupal.FieldGroup || {};
Drupal.FieldGroup.Effects = Drupal.FieldGroup.Effects || {};

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup.Effects.processAddMore = {
  execute: function (context, settings, type) {
    if (type == 'form') {
      // Add required fields mark to any element containing required fields
    /*  $('div.addmore-pane').each(function(i){
        if ($('.error', $(this)).length) {
          Drupal.FieldGroup.setGroupWithfocus($(this));
          $(this).data('addmoreControl').focus();
        }   });
		*/
 var controls;
  controls += '<span class="addmore-button"></span>';//item = $('<span class="addmore-button"></span>');
  //is form-submit needed
  controls += '<input type="button" id="add-book" class="form-submit entityform-add-book" value="Add Another" />';//item.append(controls.addMore = $('<input type="button" class="form-submit entityform-add-book" value="" />').val(controls.nextTitle = Drupal.t('Add Another')));
  $(controls).appendTo('.field-group-AddMore');//.append(controls);
  console.log("what");

   
    }
  }
}


})(jQuery);